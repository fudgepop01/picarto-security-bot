syntax = "proto3";
// Chat message client->server
message NewMessage {
	string message = 1;
}

// Sends the userlist
message UserList {
	message User {
		message UserData {
			bool registered = 1;
			bool moderator = 2;
			bool streamer = 3;
			bool ptv_admin = 4;
			bool basic = 5;
			bool premium = 6;
			bool subscriber = 7;
			string color = 8;
			bool ignoring = 9;
			bool bot = 10;
			bool chat_irc_accepted = 11;
			bool chat_irc_send_request = 12;
		}

		message BanData {
			bool is_shadow_ban = 1;
		}

		uint32 user_id = 1;
		string display_name = 2;

		oneof user_state {
			UserData user_data = 3;
			BanData ban_data = 4;
		}
	}
	repeated User user = 1;
}

// Chat message
message ChatMessage {
	message Mention {
		uint32 user_id = 1;
		string display_name = 2;
		string color = 3;
	}
	message CustomEmote {
		int64 id = 1;
		string Channel = 2;
		string Alias = 3;
	}

	uint32 id = 1;
	uint32 user_id = 2;
	string display_name = 3;
	string message = 4;
	bool registered = 5;
	bool moderator = 6;
	bool streamer = 7;
	bool ptv_admin = 8;
	bool basic = 9;
	bool premium = 10;
	bool subscriber = 11;
	string color = 12;
	int64 time_stamp = 13;
	bool is_me_message = 14;
	repeated Mention mentions = 15;
	repeated CustomEmote custom_emotes = 16;
	bool bot = 17;
}

// A global admin message
message GlobalMessage {
	string message = 1;
}

// Whisper message
message Whisper {
	message CustomEmote {
		int64 id = 1;
		string Channel = 2;
		string Alias = 3;
	}

	uint32 id = 1;
	uint32 user_id = 2;
	string display_name = 3;
	string message = 4;
	bool incomming = 5; // Whether or not we are recieving this whisper (otherwise we sent it)
	int64 time_stamp = 6;
	repeated CustomEmote custom_emotes = 7;
	bool bot = 8;
}

// Server message
message ServerMessage {
	string message = 1;
}

// Command help
message CommandHelp {
	message Command {
		repeated string triggers = 1;
		string description = 2;
	}

	repeated Command commands = 1;
}

// Signals with no data sent by the server
message Control {
	enum MessageType {
		END_HISTORY = 0; // No more history to send
		KICK = 1; // User was kicked
		GAMING = 2; // Enable/disable gaming mode
		ADULT = 3; // Enable/disable adult mode
		COMMISSIONS = 4; // Enable/disable commissions
		UNUSED_COMMISSION_DESCRIPTION = 5; // Commission description update - UNUSED
		UNUSED_DESCRIPTION = 6; // Description update - UNUSED
		CONTENT_TYPE = 7; // Update content type/category
		CAN_TALK = 8; // Can the user talk
		SHOW_POLL_CREATOR = 9; // Show the poll creator
		UNUSED_SHOW_RAFFLE_CREATOR = 10; // Show the raffle creator - UNUSED
		NAME_TAKEN = 11; // The name you have picked has already been taken
		HIDE_POLL = 12; // Hide a running poll silently - used sometimes when leaving a multi
		AWAY = 13; // When user goes AFK
		JWT_SUCCESS = 14; // If the JWT token setting succeeded/failed
		ENABLE_WHISPERS = 15; // Allow/deny whispers to be received client->server
		ALLOW_LINKS = 16; // Allow/deny link posting in chat
		UPDATE_HONOR_GOAL = 17; // Update the honor goal
		REGISTERED_14_DAYS = 18; // Allow/deny registered links
		CHAT_IRC = 19; // Allow/deny chat IRC
	}
	MessageType message_type = 1;
	bool data_bool = 2;
	uint32 channel = 3;
	string channel_name = 4;
}

// Admin control messages - PTVAdmin-sent signals
message AdminControl {
	enum MessageType {
		ADULT = 0; // Admins announce channel is not yet marked as NSFW
		GAMING = 1; // Admins announce gaming has issues
		MOVIE = 2; // Admins announce video has been detected to be copyrighted content
	}
	MessageType message_type = 1;
}

// Online status of a channel
message OnlineState {
	bool is_live = 1;
	uint32 viewers = 2;
	uint32 channel = 3;
	string channel_name = 4;
}

// Update the clients on current multistream status
message Multistream {
	message Channel {
		uint32 channel = 1;
		string channel_name = 2;
	}
	Channel host = 1;
	repeated Channel guests = 2;
}

// Update a color client->server and server->client
message Color {
	string color = 1;
}

// When the ignore list is updated
message IgnoresUpdated {
	repeated string ignores = 1;
}

// Adding/removing an ignore client->server
message ModifyIgnores {
	string ignore_name = 1;
	bool is_adding = 2; // If false, removing
}

// When a message is removed
message RemoveMessage {
	uint32 id = 1;
	uint32 executioner_id = 2;
	string executioner_display_name = 3;
}

// When all messages of a user are cleared
message ClearUserMessages {
	string username = 1; // May choose to switch to display_name
	uint32 executioner_id = 2;
	string executioner_display_name = 3;
}

// When all nessage history is cleared
message ClearHistory {
	uint32 executioner_id = 1;
	string executioner_display_name = 2;
}

// When a user is kicked
message Kick {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 executioner_id = 3;
	string executioner_display_name = 4;
}

// When a user is banned
message Ban {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 executioner_id = 3;
	string executioner_display_name = 4;
	bool is_shadow_ban = 5;
}

// When a user is unbanned
message UnBan {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 executioner_id = 3;
	string executioner_display_name = 4;
}

// When a user is modded/unmodded
message Mod {
	uint32 user_id = 1;
	string display_name = 2;
	bool is_now_mod = 3;
}

// A list of all moderators
message ModList {
	message Moderator {
		uint32 user_id = 1;
		string display_name = 2;
	}
	repeated Moderator moderators = 1;
}

// Start a raffle client->server
message RaffleInit {
	repeated string names = 1;
}

// When a raffle is run
message RaffleRun {
	string winner = 1;
	repeated string names = 2;
	uint32 host_id = 3;
	string host_display_name = 4;
}

// Start a poll client->server and server->client
message PollInit {
	string question = 1;
	repeated string options = 2;
	uint32 host_id = 3;
	string host_display_name = 4;
}

// Send poll updates
message PollUpdate {
	repeated int32 votes = 1;
	uint32 host_id = 2;
	string host_display_name = 3;
}

// When a poll is finished
message PollResult {
	string question = 1;
	repeated string winners = 2;
	int32 votes = 3;
	uint32 host_id = 4;
	string host_display_name = 5;
}

// Poll vote client->server
message PollVote {
	uint32 option = 1;
}

// Poll vote confirmation
message PollVoteResponse {
	bool success = 1;
}

// Set a name client->server
message SetName {
	string name = 1;
}

// Confirm your name was set (if response is non-empty, something went wrong)
message NameConfirmation {
	string response = 1;
}

// When mod tools should change type
message ModTools {
	enum ModToolsType {
		NONE = 0;
		MODERATOR = 1;
		STREAMER = 2;
		PTV_ADMIN = 3;
	}
	ModToolsType mod_tools_type = 1;
}

// End a poll client->server
message PollEnd {
}

// A reminder set by the streamer
message Reminder {
	string message = 1;
}

// A timer set by the streamer
message Timer {
	string message = 1;
}

// A wrapper for messages for the monitor client
message MonitorData {
	bytes message_content = 1;
	uint32 channel = 2;
	string channel_name = 3;
}

// When the chat level has changed (who can talk) (client->server and server->client)
message ChatLevel {
	enum ChatLevelType {
		EVERYONE = 0; // Everyone can talk
		STREAMER = 1; // Only the streamer can talk
		STREAMER_MODERATOR = 2; // Only the streamer and moderators can talk
		STREAMER_MODERATOR_SUBSCRIBER = 3; // Only the streamer, moderators and subscribers can talk
		STREAMER_MODERATOR_FOLLOWER = 4; // Only the streamer, moderators and followers can talk
		STREAMER_MODERATOR_SUBSCRIBER_FOLLOWER = 5; // Only the streamer, moderators, subscribers and followers can talk
		NO_GUEST = 6; // No guests can talk
	}
	ChatLevelType chat_level = 1;
}

// Request the userlist from the server client->server
message RequestUserlist {
}

// Send info about a specific user (client->server and server->client) - For client->server, send only display_name
message UserInfo {
	uint32 user_id = 1;
	string display_name = 2;
	bool registered = 3;
	bool moderator = 4;
	bool streamer = 5;
	bool ptv_admin = 6;
	bool basic = 7;
	bool premium = 8;
	bool subscriber = 9;
	string color = 10;
	bool ignoring = 11;
	bool banned = 12;
	bool shadow_banned = 13;
	bool bot = 14;
	bool chat_irc_accepted = 15;
	bool chat_irc_send_request = 16;
}

// Total users currently in chat
message UserCount {
	uint32 users = 1;
}

// Show the raffle overlay with these users
message ShowRaffle {
	message User {
		string display_name = 1;
		bool subscriber = 2;
	}
	repeated User user = 1;
}

// When an event starts/stops
message Event {
	string event_id = 1;
	bool starting = 2;
	bool should_redirect = 3;
}

// When a new JWT key is set client->server and server->client
// When client->server, only key is needed. Other fields are used in the reply to update client state
message SetJWT {
	string key = 1;
	string name = 2;
	bool registered = 3;
	bool premium = 4;
	bool basic = 5;
	bool streamer = 6;
	bool chat_irc_accepted = 7;
	bool chat_irc_send_request = 8;
	bool moderator = 9;
	bool ptv_admin = 10;
	bool subscriber = 11;
	bool banned = 12;
	bool shadow_banned = 13;
	bool bot = 14;
}

// Updates emotes with a signed message client->server
message UpdateEmotes {
	string emotes = 1;
}

// Ping/pong message (must answer a ping with a pong from either side)
message PingPong {
	enum PingType {
		PING = 0;
		PONG = 1;
	}
	PingType type = 1;
}

// Honor donation message
message Honor {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 channel_id = 3;
	string channel_name = 4;
	uint32 amount = 5;
	string message = 6;
}

// User chat irc status
message ChatIrcStatus {
	uint32 user_id = 1;
	bool   chat_irc_accepted = 2;
	bool   chat_irc_send_request = 3;
	bool   registered = 4;
	bool   streamer = 5;
	bool   moderator = 6;
	bool   ptv_admin = 7;
}

// When a user is accepted to irc chat
message ChatIrcRequest {
	uint32 user_id = 1;
	string display_name = 2;
}

// When a user is accepted to irc chat
message ChatIrcAccepted {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 executioner_id = 3;
	string executioner_display_name = 4;
}

// When a user is accepted to irc chat
message ChatIrcDeclined {
	uint32 user_id = 1;
	string display_name = 2;
	uint32 executioner_id = 3;
	string executioner_display_name = 4;
}